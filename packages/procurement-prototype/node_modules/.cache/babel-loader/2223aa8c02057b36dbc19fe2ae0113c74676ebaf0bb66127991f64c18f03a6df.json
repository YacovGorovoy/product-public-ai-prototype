{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yacov.gorovoy\\\\Documents\\\\Cursor-workspace\\\\procurement-prototype\\\\src\\\\components\\\\Badge.js\";\n// Badge component for status indicators\nimport React from 'react';\n\n/**\r\n * Badge for status indicators\r\n * @param {string} text - Badge text (deprecated, use children)\r\n * @param {string} children - Badge content\r\n * @param {string} color - Color variant (gray, yellow, green, blue, orange) or full Tailwind classes\r\n * @param {string} className - Additional classes\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Badge({\n  text,\n  children,\n  color = 'gray',\n  className = ''\n}) {\n  const content = children || text;\n  const getColorClasses = colorVariant => {\n    switch (colorVariant) {\n      case 'gray':\n        return 'bg-gray-100 text-gray-800';\n      case 'yellow':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'green':\n        return 'bg-green-100 text-green-800';\n      case 'blue':\n        return 'bg-blue-100 text-blue-800';\n      case 'orange':\n        return 'bg-orange-100 text-orange-800';\n      default:\n        // If it's not a predefined color, assume it's full Tailwind classes\n        return colorVariant;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getColorClasses(color)} ${className}`,\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_c = Badge;\nvar _c;\n$RefreshReg$(_c, \"Badge\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Badge","text","children","color","className","content","getColorClasses","colorVariant","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yacov.gorovoy/Documents/Cursor-workspace/procurement-prototype/src/components/Badge.js"],"sourcesContent":["// Badge component for status indicators\r\nimport React from 'react';\r\n\r\n/**\r\n * Badge for status indicators\r\n * @param {string} text - Badge text (deprecated, use children)\r\n * @param {string} children - Badge content\r\n * @param {string} color - Color variant (gray, yellow, green, blue, orange) or full Tailwind classes\r\n * @param {string} className - Additional classes\r\n */\r\nexport default function Badge({ text, children, color = 'gray', className = '' }) {\r\n  const content = children || text;\r\n  \r\n  const getColorClasses = (colorVariant) => {\r\n    switch (colorVariant) {\r\n      case 'gray':\r\n        return 'bg-gray-100 text-gray-800';\r\n      case 'yellow':\r\n        return 'bg-yellow-100 text-yellow-800';\r\n      case 'green':\r\n        return 'bg-green-100 text-green-800';\r\n      case 'blue':\r\n        return 'bg-blue-100 text-blue-800';\r\n      case 'orange':\r\n        return 'bg-orange-100 text-orange-800';\r\n      default:\r\n        // If it's not a predefined color, assume it's full Tailwind classes\r\n        return colorVariant;\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getColorClasses(color)} ${className}`}>\r\n      {content}\r\n    </span>\r\n  );\r\n} "],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AANA,SAAAC,MAAA,IAAAC,OAAA;AAOA,eAAe,SAASC,KAAKA,CAAC;EAAEC,IAAI;EAAEC,QAAQ;EAAEC,KAAK,GAAG,MAAM;EAAEC,SAAS,GAAG;AAAG,CAAC,EAAE;EAChF,MAAMC,OAAO,GAAGH,QAAQ,IAAID,IAAI;EAEhC,MAAMK,eAAe,GAAIC,YAAY,IAAK;IACxC,QAAQA,YAAY;MAClB,KAAK,MAAM;QACT,OAAO,2BAA2B;MACpC,KAAK,QAAQ;QACX,OAAO,+BAA+B;MACxC,KAAK,OAAO;QACV,OAAO,6BAA6B;MACtC,KAAK,MAAM;QACT,OAAO,2BAA2B;MACpC,KAAK,QAAQ;QACX,OAAO,+BAA+B;MACxC;QACE;QACA,OAAOA,YAAY;IACvB;EACF,CAAC;EAED,oBACER,OAAA;IAAMK,SAAS,EAAE,2EAA2EE,eAAe,CAACH,KAAK,CAAC,IAAIC,SAAS,EAAG;IAAAF,QAAA,EAC/HG;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEX;AAACC,EAAA,GA1BuBZ,KAAK;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}