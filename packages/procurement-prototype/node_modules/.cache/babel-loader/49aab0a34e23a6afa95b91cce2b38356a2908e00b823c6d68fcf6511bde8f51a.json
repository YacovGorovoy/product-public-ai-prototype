{"ast":null,"code":"import React,{useState}from'react';/**\r\n * ProcessFlow component for visualizing sequential and parallel steps.\r\n * @param {Array} steps - Array of steps. Each step can be:\r\n *   - { label, status, icon, names, tooltip }\r\n *   - Or an array of such objects for parallel steps\r\n *\r\n * status: 'completed' | 'current' | 'pending'\r\n * icon: ReactNode (optional)\r\n * names: string | string[] (optional)\r\n * tooltip: string | ReactNode (optional)\r\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function ProcessFlow(_ref){let{steps=[]}=_ref;// Tooltip state\nconst[tooltip,setTooltip]=useState({show:false,content:null,x:0,y:0});// Helper to render a single step\nconst renderStep=(step,idx)=>{const handleMouseEnter=e=>{if(step.tooltip){const rect=e.currentTarget.getBoundingClientRect();setTooltip({show:true,content:step.tooltip,x:rect.left+rect.width/2,y:rect.top});}};const handleMouseLeave=()=>setTooltip({show:false,content:null,x:0,y:0});let borderColor='border-gray-300';let bgColor='bg-white';let textColor='text-gray-500';if(step.status==='completed'){borderColor='border-green-500';bgColor='bg-green-500';textColor='text-green-700';}else if(step.status==='current'){borderColor='border-blue-500';bgColor='bg-blue-500';textColor='text-blue-700';}// Handle both old and new data structures\nconst label=step.label||step.role||'Unknown Step';const names=step.names||step.approver||'Unknown Approver';return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col items-center min-w-[100px] relative group cursor-pointer\",onMouseEnter:handleMouseEnter,onMouseLeave:handleMouseLeave,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-2\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"w-4 h-4 rounded-full border-2 flex items-center justify-center transition-all duration-150 \".concat(bgColor,\" \").concat(borderColor),children:step.icon?/*#__PURE__*/_jsx(\"span\",{className:\"w-3 h-3 flex items-center justify-center\",children:step.icon}):/*#__PURE__*/_jsx(\"span\",{className:\"w-2 h-2 rounded-full block \".concat(step.status==='completed'?'bg-white':step.status==='current'?'bg-white':'bg-gray-300')})}),/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold text-xs \".concat(textColor),children:label})]}),names&&/*#__PURE__*/_jsx(\"span\",{className:\"text-xs text-gray-400 mt-0.5 text-center max-w-[80px] truncate\",children:Array.isArray(names)?names.join(', '):names}),step.subLabel&&/*#__PURE__*/_jsx(\"span\",{className:\"text-xs text-gray-400 mt-0.5\",children:step.subLabel})]},idx);};// Helper to render a group of parallel steps (vertically stacked)\nconst renderParallel=(group,idx)=>/*#__PURE__*/_jsx(\"div\",{className:\"flex flex-col items-center relative gap-4\",children:group.map(renderStep)},idx);// Render the flow\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-2 py-4 px-4 bg-gray-50 rounded-lg overflow-x-auto relative border border-gray-200 min-h-[100px]\",children:[steps.length===0?/*#__PURE__*/_jsx(\"div\",{className:\"text-gray-500 text-center w-full\",children:\"No approval steps defined\"}):steps.map((step,idx)=>/*#__PURE__*/_jsxs(React.Fragment,{children:[Array.isArray(step)?renderParallel(step,idx):renderStep(step,idx),idx<steps.length-1&&/*#__PURE__*/_jsx(\"div\",{className:\"flex-1 h-0.5 bg-gray-200 mx-1 min-w-[24px]\"})]},idx)),tooltip.show&&/*#__PURE__*/_jsx(\"div\",{className:\"fixed z-50 px-3 py-2 text-sm text-white bg-gray-900 rounded-lg shadow-lg whitespace-nowrap\",style:{left:tooltip.x,top:tooltip.y-40,transform:'translate(-50%, -100%)'},children:tooltip.content})]});}","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","ProcessFlow","_ref","steps","tooltip","setTooltip","show","content","x","y","renderStep","step","idx","handleMouseEnter","e","rect","currentTarget","getBoundingClientRect","left","width","top","handleMouseLeave","borderColor","bgColor","textColor","status","label","role","names","approver","className","onMouseEnter","onMouseLeave","children","concat","icon","Array","isArray","join","subLabel","renderParallel","group","map","length","Fragment","style","transform"],"sources":["C:/Users/yacov.gorovoy/Documents/Cursor-workspace/procurement-prototype/src/components/ProcessFlow.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n/**\r\n * ProcessFlow component for visualizing sequential and parallel steps.\r\n * @param {Array} steps - Array of steps. Each step can be:\r\n *   - { label, status, icon, names, tooltip }\r\n *   - Or an array of such objects for parallel steps\r\n *\r\n * status: 'completed' | 'current' | 'pending'\r\n * icon: ReactNode (optional)\r\n * names: string | string[] (optional)\r\n * tooltip: string | ReactNode (optional)\r\n */\r\nexport default function ProcessFlow({ steps = [] }) {\r\n  // Tooltip state\r\n  const [tooltip, setTooltip] = useState({ show: false, content: null, x: 0, y: 0 });\r\n\r\n  // Helper to render a single step\r\n  const renderStep = (step, idx) => {\r\n    const handleMouseEnter = e => {\r\n      if (step.tooltip) {\r\n        const rect = e.currentTarget.getBoundingClientRect();\r\n        setTooltip({\r\n          show: true,\r\n          content: step.tooltip,\r\n          x: rect.left + rect.width / 2,\r\n          y: rect.top\r\n        });\r\n      }\r\n    };\r\n    const handleMouseLeave = () => setTooltip({ show: false, content: null, x: 0, y: 0 });\r\n\r\n    let borderColor = 'border-gray-300';\r\n    let bgColor = 'bg-white';\r\n    let textColor = 'text-gray-500';\r\n    if (step.status === 'completed') {\r\n      borderColor = 'border-green-500';\r\n      bgColor = 'bg-green-500';\r\n      textColor = 'text-green-700';\r\n    } else if (step.status === 'current') {\r\n      borderColor = 'border-blue-500';\r\n      bgColor = 'bg-blue-500';\r\n      textColor = 'text-blue-700';\r\n    }\r\n\r\n    // Handle both old and new data structures\r\n    const label = step.label || step.role || 'Unknown Step';\r\n    const names = step.names || step.approver || 'Unknown Approver';\r\n    \r\n\r\n\r\n    return (\r\n      <div\r\n        key={idx}\r\n        className=\"flex flex-col items-center min-w-[100px] relative group cursor-pointer\"\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n      >\r\n        <div className=\"flex items-center gap-2\">\r\n          {/* Status indicator with icon slot */}\r\n          <span className={`w-4 h-4 rounded-full border-2 flex items-center justify-center transition-all duration-150 ${bgColor} ${borderColor}`}>\r\n            {step.icon ? (\r\n              <span className=\"w-3 h-3 flex items-center justify-center\">{step.icon}</span>\r\n            ) : (\r\n              <span className={`w-2 h-2 rounded-full block ${step.status === 'completed' ? 'bg-white' : step.status === 'current' ? 'bg-white' : 'bg-gray-300'}`} />\r\n            )}\r\n          </span>\r\n          <span className={`font-semibold text-xs ${textColor}`}>{label}</span>\r\n        </div>\r\n        {names && (\r\n          <span className=\"text-xs text-gray-400 mt-0.5 text-center max-w-[80px] truncate\">\r\n            {Array.isArray(names) ? names.join(', ') : names}\r\n          </span>\r\n        )}\r\n        {step.subLabel && <span className=\"text-xs text-gray-400 mt-0.5\">{step.subLabel}</span>}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Helper to render a group of parallel steps (vertically stacked)\r\n  const renderParallel = (group, idx) => (\r\n    <div key={idx} className=\"flex flex-col items-center relative gap-4\">\r\n      {group.map(renderStep)}\r\n    </div>\r\n  );\r\n\r\n  // Render the flow\r\n  return (\r\n    <div className=\"flex items-center gap-2 py-4 px-4 bg-gray-50 rounded-lg overflow-x-auto relative border border-gray-200 min-h-[100px]\">\r\n      {steps.length === 0 ? (\r\n        <div className=\"text-gray-500 text-center w-full\">No approval steps defined</div>\r\n      ) : (\r\n        steps.map((step, idx) => (\r\n          <React.Fragment key={idx}>\r\n            {Array.isArray(step)\r\n              ? renderParallel(step, idx)\r\n              : renderStep(step, idx)}\r\n            {/* Connector line, except after last step */}\r\n            {idx < steps.length - 1 && (\r\n              <div className=\"flex-1 h-0.5 bg-gray-200 mx-1 min-w-[24px]\" />\r\n            )}\r\n          </React.Fragment>\r\n        ))\r\n      )}\r\n      {/* Tooltip overlay */}\r\n      {tooltip.show && (\r\n        <div\r\n          className=\"fixed z-50 px-3 py-2 text-sm text-white bg-gray-900 rounded-lg shadow-lg whitespace-nowrap\"\r\n          style={{ left: tooltip.x, top: tooltip.y - 40, transform: 'translate(-50%, -100%)' }}\r\n        >\r\n          {tooltip.content}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}