{"ast":null,"code":"// Local database utility for managing procurement records\nconst DB_KEY = 'procurement_records';\n\n// Sample data generator\nconst generateSampleData = () => {\n  const vendors = ['ACME corp', 'Software Corp', 'Office Supplies Ltd', 'Tech Solutions Inc', 'Marketing Agency', 'Cloud Services Co', 'Hardware Store', 'Consulting Group'];\n  const departments = ['Product', 'Engineering', 'Marketing', 'Sales', 'HR', 'Finance'];\n  const categories = ['Software', 'Hardware', 'Office Supplies', 'Services', 'Meals', 'Travel'];\n  const statuses = ['Draft', 'Pending approval', 'Approved', 'Pending AP action', 'Pending Payment'];\n  const records = [];\n\n  // Generate 50 sample records\n  for (let i = 1; i <= 50; i++) {\n    const type = ['request', 'bill', 'expense'][Math.floor(Math.random() * 3)];\n    const status = statuses[Math.floor(Math.random() * statuses.length)];\n    const vendor = vendors[Math.floor(Math.random() * vendors.length)];\n    const amount = Math.floor(Math.random() * 5000) + 100;\n    const baseRecord = {\n      id: i,\n      type,\n      title: `${type.charAt(0).toUpperCase() + type.slice(1)} #${i.toString().padStart(3, '0')}`,\n      status,\n      amount,\n      vendor,\n      createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    if (type === 'request') {\n      records.push({\n        ...baseRecord,\n        title: `AI Licences for ${departments[Math.floor(Math.random() * departments.length)]} team`,\n        submittedDate: new Date(Date.now() - Math.random() * 10 * 24 * 60 * 60 * 1000).toISOString(),\n        department: departments[Math.floor(Math.random() * departments.length)],\n        lineItemsCount: Math.floor(Math.random() * 5) + 1,\n        requester: `User.${Math.floor(Math.random() * 100)}`\n      });\n    } else if (type === 'bill') {\n      const billDate = new Date(Date.now() - Math.random() * 15 * 24 * 60 * 60 * 1000);\n      const dueDate = new Date(billDate.getTime() + (Math.random() * 30 + 15) * 24 * 60 * 60 * 1000);\n      records.push({\n        ...baseRecord,\n        title: `Monthly ${categories[Math.floor(Math.random() * categories.length)]} Bill`,\n        billDate: billDate.toISOString(),\n        dueDate: dueDate.toISOString(),\n        gapFromLastBill: Math.random() > 0.7 ? Math.floor(Math.random() * 60) + 35 : null\n      });\n    } else if (type === 'expense') {\n      records.push({\n        ...baseRecord,\n        title: `${categories[Math.floor(Math.random() * categories.length)]} Expense`,\n        purchasedDate: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(),\n        submittedBy: `User.${Math.floor(Math.random() * 100)}`,\n        category: categories[Math.floor(Math.random() * categories.length)]\n      });\n    }\n  }\n  return records.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\n};\n\n// Initialize database\nconst initializeDB = () => {\n  const existingData = localStorage.getItem(DB_KEY);\n  if (!existingData) {\n    const sampleData = generateSampleData();\n    localStorage.setItem(DB_KEY, JSON.stringify(sampleData));\n    return sampleData;\n  }\n  return JSON.parse(existingData);\n};\n\n// CRUD Operations\nexport const localDB = {\n  // Get all records\n  getAll: () => {\n    const data = localStorage.getItem(DB_KEY);\n    return data ? JSON.parse(data) : initializeDB();\n  },\n  // Get record by ID\n  getById: id => {\n    const records = localDB.getAll();\n    return records.find(record => record.id === id);\n  },\n  // Get records with filters\n  getFiltered: ({\n    tab = 'toDo',\n    // 'toDo' or 'allMyItems'\n    filter = 'all',\n    // 'toSubmit', 'toApprove', 'myItems', 'activeOnly'\n    search = '',\n    type = 'all',\n    // 'all', 'requests', 'bills', 'expenses'\n    status = 'all',\n    page = 1,\n    limit = 20\n  } = {}) => {\n    let records = localDB.getAll();\n\n    // Tab filtering\n    if (tab === 'toDo') {\n      records = records.filter(record => record.status === 'Draft' || record.status === 'Pending approval');\n    }\n\n    // Sub-filter filtering\n    if (filter === 'toSubmit') {\n      records = records.filter(record => record.status === 'Draft');\n    } else if (filter === 'toApprove') {\n      records = records.filter(record => record.status === 'Pending approval');\n    } else if (filter === 'activeOnly') {\n      records = records.filter(record => record.status !== 'Approved' && record.status !== 'Pending Payment');\n    }\n\n    // Search filtering\n    if (search) {\n      const searchLower = search.toLowerCase();\n      records = records.filter(record => record.title.toLowerCase().includes(searchLower) || record.vendor.toLowerCase().includes(searchLower) || record.department && record.department.toLowerCase().includes(searchLower) || record.category && record.category.toLowerCase().includes(searchLower));\n    }\n\n    // Type filtering\n    if (type !== 'all') {\n      const typeMap = {\n        'requests': 'request',\n        'bills': 'bill',\n        'expenses': 'expense'\n      };\n      records = records.filter(record => record.type === typeMap[type]);\n    }\n\n    // Status filtering\n    if (status !== 'all') {\n      records = records.filter(record => record.status === status);\n    }\n\n    // Pagination\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const paginatedRecords = records.slice(startIndex, endIndex);\n    return {\n      records: paginatedRecords,\n      totalCount: records.length,\n      hasMore: endIndex < records.length,\n      page,\n      limit\n    };\n  },\n  // Search for grouped results (for search dropdown)\n  search: query => {\n    if (!query) return {\n      requests: [],\n      bills: [],\n      expenses: [],\n      vendors: [],\n      employees: []\n    };\n    const records = localDB.getAll();\n    const queryLower = query.toLowerCase();\n    const requests = records.filter(record => record.type === 'request' && (record.title.toLowerCase().includes(queryLower) || record.vendor.toLowerCase().includes(queryLower))).slice(0, 5);\n    const bills = records.filter(record => record.type === 'bill' && (record.title.toLowerCase().includes(queryLower) || record.vendor.toLowerCase().includes(queryLower))).slice(0, 5);\n    const expenses = records.filter(record => record.type === 'expense' && (record.title.toLowerCase().includes(queryLower) || record.vendor.toLowerCase().includes(queryLower))).slice(0, 5);\n\n    // Extract unique vendors\n    const vendors = [...new Set(records.map(r => r.vendor))].filter(vendor => vendor.toLowerCase().includes(queryLower)).slice(0, 5).map(name => ({\n      id: name,\n      name\n    }));\n\n    // Extract unique employees (from submittedBy and requester)\n    const employees = [...new Set([...records.filter(r => r.submittedBy).map(r => r.submittedBy), ...records.filter(r => r.requester).map(r => r.requester)])].filter(employee => employee.toLowerCase().includes(queryLower)).slice(0, 5).map(name => ({\n      id: name,\n      name\n    }));\n    return {\n      requests,\n      bills,\n      expenses,\n      vendors,\n      employees\n    };\n  },\n  // Create new record\n  create: recordData => {\n    const records = localDB.getAll();\n    const newId = Math.max(...records.map(r => r.id)) + 1;\n    const newRecord = {\n      ...recordData,\n      id: newId,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    records.unshift(newRecord);\n    localStorage.setItem(DB_KEY, JSON.stringify(records));\n    return newRecord;\n  },\n  // Update record\n  update: (id, updates) => {\n    const records = localDB.getAll();\n    const index = records.findIndex(record => record.id === id);\n    if (index !== -1) {\n      records[index] = {\n        ...records[index],\n        ...updates,\n        updatedAt: new Date().toISOString()\n      };\n      localStorage.setItem(DB_KEY, JSON.stringify(records));\n      return records[index];\n    }\n    return null;\n  },\n  // Delete record\n  delete: id => {\n    const records = localDB.getAll();\n    const filteredRecords = records.filter(record => record.id !== id);\n    if (filteredRecords.length !== records.length) {\n      localStorage.setItem(DB_KEY, JSON.stringify(filteredRecords));\n      return true;\n    }\n    return false;\n  },\n  // Bulk operations\n  bulkUpdate: (ids, updates) => {\n    const records = localDB.getAll();\n    let updatedCount = 0;\n    records.forEach(record => {\n      if (ids.includes(record.id)) {\n        Object.assign(record, updates, {\n          updatedAt: new Date().toISOString()\n        });\n        updatedCount++;\n      }\n    });\n    if (updatedCount > 0) {\n      localStorage.setItem(DB_KEY, JSON.stringify(records));\n    }\n    return updatedCount;\n  },\n  // Get counts for tabs\n  getCounts: () => {\n    const records = localDB.getAll();\n    const toDoCounts = {\n      total: records.filter(r => r.status === 'Draft' || r.status === 'Pending approval').length,\n      toSubmit: records.filter(r => r.status === 'Draft').length,\n      toApprove: records.filter(r => r.status === 'Pending approval').length\n    };\n    const allItemsCounts = {\n      total: records.length,\n      active: records.filter(r => r.status !== 'Approved' && r.status !== 'Pending Payment').length\n    };\n    return {\n      toDo: toDoCounts,\n      allItems: allItemsCounts\n    };\n  },\n  // Reset database (for testing)\n  reset: () => {\n    localStorage.removeItem(DB_KEY);\n    return initializeDB();\n  }\n};\n\n// Initialize on import\ninitializeDB();","map":{"version":3,"names":["DB_KEY","generateSampleData","vendors","departments","categories","statuses","records","i","type","Math","floor","random","status","length","vendor","amount","baseRecord","id","title","charAt","toUpperCase","slice","toString","padStart","createdAt","Date","now","toISOString","updatedAt","push","submittedDate","department","lineItemsCount","requester","billDate","dueDate","getTime","gapFromLastBill","purchasedDate","submittedBy","category","sort","a","b","initializeDB","existingData","localStorage","getItem","sampleData","setItem","JSON","stringify","parse","localDB","getAll","data","getById","find","record","getFiltered","tab","filter","search","page","limit","searchLower","toLowerCase","includes","typeMap","startIndex","endIndex","paginatedRecords","totalCount","hasMore","query","requests","bills","expenses","employees","queryLower","Set","map","r","name","employee","create","recordData","newId","max","newRecord","unshift","update","updates","index","findIndex","delete","filteredRecords","bulkUpdate","ids","updatedCount","forEach","Object","assign","getCounts","toDoCounts","total","toSubmit","toApprove","allItemsCounts","active","toDo","allItems","reset","removeItem"],"sources":["C:/Users/yacov.gorovoy/Documents/Cursor-workspace/procurement-prototype/src/utils/localDB.js"],"sourcesContent":["// Local database utility for managing procurement records\r\nconst DB_KEY = 'procurement_records';\r\n\r\n// Sample data generator\r\nconst generateSampleData = () => {\r\n  const vendors = [\r\n    'ACME corp', 'Software Corp', 'Office Supplies Ltd', 'Tech Solutions Inc',\r\n    'Marketing Agency', 'Cloud Services Co', 'Hardware Store', 'Consulting Group'\r\n  ];\r\n  \r\n  const departments = ['Product', 'Engineering', 'Marketing', 'Sales', 'HR', 'Finance'];\r\n  const categories = ['Software', 'Hardware', 'Office Supplies', 'Services', 'Meals', 'Travel'];\r\n  const statuses = ['Draft', 'Pending approval', 'Approved', 'Pending AP action', 'Pending Payment'];\r\n  \r\n  const records = [];\r\n  \r\n  // Generate 50 sample records\r\n  for (let i = 1; i <= 50; i++) {\r\n    const type = ['request', 'bill', 'expense'][Math.floor(Math.random() * 3)];\r\n    const status = statuses[Math.floor(Math.random() * statuses.length)];\r\n    const vendor = vendors[Math.floor(Math.random() * vendors.length)];\r\n    const amount = Math.floor(Math.random() * 5000) + 100;\r\n    \r\n    const baseRecord = {\r\n      id: i,\r\n      type,\r\n      title: `${type.charAt(0).toUpperCase() + type.slice(1)} #${i.toString().padStart(3, '0')}`,\r\n      status,\r\n      amount,\r\n      vendor,\r\n      createdAt: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    \r\n    if (type === 'request') {\r\n      records.push({\r\n        ...baseRecord,\r\n        title: `AI Licences for ${departments[Math.floor(Math.random() * departments.length)]} team`,\r\n        submittedDate: new Date(Date.now() - Math.random() * 10 * 24 * 60 * 60 * 1000).toISOString(),\r\n        department: departments[Math.floor(Math.random() * departments.length)],\r\n        lineItemsCount: Math.floor(Math.random() * 5) + 1,\r\n        requester: `User.${Math.floor(Math.random() * 100)}`\r\n      });\r\n    } else if (type === 'bill') {\r\n      const billDate = new Date(Date.now() - Math.random() * 15 * 24 * 60 * 60 * 1000);\r\n      const dueDate = new Date(billDate.getTime() + (Math.random() * 30 + 15) * 24 * 60 * 60 * 1000);\r\n      \r\n      records.push({\r\n        ...baseRecord,\r\n        title: `Monthly ${categories[Math.floor(Math.random() * categories.length)]} Bill`,\r\n        billDate: billDate.toISOString(),\r\n        dueDate: dueDate.toISOString(),\r\n        gapFromLastBill: Math.random() > 0.7 ? Math.floor(Math.random() * 60) + 35 : null\r\n      });\r\n    } else if (type === 'expense') {\r\n      records.push({\r\n        ...baseRecord,\r\n        title: `${categories[Math.floor(Math.random() * categories.length)]} Expense`,\r\n        purchasedDate: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString(),\r\n        submittedBy: `User.${Math.floor(Math.random() * 100)}`,\r\n        category: categories[Math.floor(Math.random() * categories.length)]\r\n      });\r\n    }\r\n  }\r\n  \r\n  return records.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));\r\n};\r\n\r\n// Initialize database\r\nconst initializeDB = () => {\r\n  const existingData = localStorage.getItem(DB_KEY);\r\n  if (!existingData) {\r\n    const sampleData = generateSampleData();\r\n    localStorage.setItem(DB_KEY, JSON.stringify(sampleData));\r\n    return sampleData;\r\n  }\r\n  return JSON.parse(existingData);\r\n};\r\n\r\n// CRUD Operations\r\nexport const localDB = {\r\n  // Get all records\r\n  getAll: () => {\r\n    const data = localStorage.getItem(DB_KEY);\r\n    return data ? JSON.parse(data) : initializeDB();\r\n  },\r\n  \r\n  // Get record by ID\r\n  getById: (id) => {\r\n    const records = localDB.getAll();\r\n    return records.find(record => record.id === id);\r\n  },\r\n  \r\n  // Get records with filters\r\n  getFiltered: ({\r\n    tab = 'toDo', // 'toDo' or 'allMyItems'\r\n    filter = 'all', // 'toSubmit', 'toApprove', 'myItems', 'activeOnly'\r\n    search = '',\r\n    type = 'all', // 'all', 'requests', 'bills', 'expenses'\r\n    status = 'all',\r\n    page = 1,\r\n    limit = 20\r\n  } = {}) => {\r\n    let records = localDB.getAll();\r\n    \r\n    // Tab filtering\r\n    if (tab === 'toDo') {\r\n      records = records.filter(record => \r\n        record.status === 'Draft' || record.status === 'Pending approval'\r\n      );\r\n    }\r\n    \r\n    // Sub-filter filtering\r\n    if (filter === 'toSubmit') {\r\n      records = records.filter(record => record.status === 'Draft');\r\n    } else if (filter === 'toApprove') {\r\n      records = records.filter(record => record.status === 'Pending approval');\r\n    } else if (filter === 'activeOnly') {\r\n      records = records.filter(record => \r\n        record.status !== 'Approved' && record.status !== 'Pending Payment'\r\n      );\r\n    }\r\n    \r\n    // Search filtering\r\n    if (search) {\r\n      const searchLower = search.toLowerCase();\r\n      records = records.filter(record =>\r\n        record.title.toLowerCase().includes(searchLower) ||\r\n        record.vendor.toLowerCase().includes(searchLower) ||\r\n        (record.department && record.department.toLowerCase().includes(searchLower)) ||\r\n        (record.category && record.category.toLowerCase().includes(searchLower))\r\n      );\r\n    }\r\n    \r\n    // Type filtering\r\n    if (type !== 'all') {\r\n      const typeMap = {\r\n        'requests': 'request',\r\n        'bills': 'bill',\r\n        'expenses': 'expense'\r\n      };\r\n      records = records.filter(record => record.type === typeMap[type]);\r\n    }\r\n    \r\n    // Status filtering\r\n    if (status !== 'all') {\r\n      records = records.filter(record => record.status === status);\r\n    }\r\n    \r\n    // Pagination\r\n    const startIndex = (page - 1) * limit;\r\n    const endIndex = startIndex + limit;\r\n    const paginatedRecords = records.slice(startIndex, endIndex);\r\n    \r\n    return {\r\n      records: paginatedRecords,\r\n      totalCount: records.length,\r\n      hasMore: endIndex < records.length,\r\n      page,\r\n      limit\r\n    };\r\n  },\r\n  \r\n  // Search for grouped results (for search dropdown)\r\n  search: (query) => {\r\n    if (!query) return { requests: [], bills: [], expenses: [], vendors: [], employees: [] };\r\n    \r\n    const records = localDB.getAll();\r\n    const queryLower = query.toLowerCase();\r\n    \r\n    const requests = records\r\n      .filter(record => record.type === 'request' && \r\n        (record.title.toLowerCase().includes(queryLower) || \r\n         record.vendor.toLowerCase().includes(queryLower)))\r\n      .slice(0, 5);\r\n    \r\n    const bills = records\r\n      .filter(record => record.type === 'bill' && \r\n        (record.title.toLowerCase().includes(queryLower) || \r\n         record.vendor.toLowerCase().includes(queryLower)))\r\n      .slice(0, 5);\r\n    \r\n    const expenses = records\r\n      .filter(record => record.type === 'expense' && \r\n        (record.title.toLowerCase().includes(queryLower) || \r\n         record.vendor.toLowerCase().includes(queryLower)))\r\n      .slice(0, 5);\r\n    \r\n    // Extract unique vendors\r\n    const vendors = [...new Set(records.map(r => r.vendor))]\r\n      .filter(vendor => vendor.toLowerCase().includes(queryLower))\r\n      .slice(0, 5)\r\n      .map(name => ({ id: name, name }));\r\n    \r\n    // Extract unique employees (from submittedBy and requester)\r\n    const employees = [...new Set([\r\n      ...records.filter(r => r.submittedBy).map(r => r.submittedBy),\r\n      ...records.filter(r => r.requester).map(r => r.requester)\r\n    ])]\r\n      .filter(employee => employee.toLowerCase().includes(queryLower))\r\n      .slice(0, 5)\r\n      .map(name => ({ id: name, name }));\r\n    \r\n    return { requests, bills, expenses, vendors, employees };\r\n  },\r\n  \r\n  // Create new record\r\n  create: (recordData) => {\r\n    const records = localDB.getAll();\r\n    const newId = Math.max(...records.map(r => r.id)) + 1;\r\n    const newRecord = {\r\n      ...recordData,\r\n      id: newId,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    \r\n    records.unshift(newRecord);\r\n    localStorage.setItem(DB_KEY, JSON.stringify(records));\r\n    return newRecord;\r\n  },\r\n  \r\n  // Update record\r\n  update: (id, updates) => {\r\n    const records = localDB.getAll();\r\n    const index = records.findIndex(record => record.id === id);\r\n    \r\n    if (index !== -1) {\r\n      records[index] = {\r\n        ...records[index],\r\n        ...updates,\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n      localStorage.setItem(DB_KEY, JSON.stringify(records));\r\n      return records[index];\r\n    }\r\n    \r\n    return null;\r\n  },\r\n  \r\n  // Delete record\r\n  delete: (id) => {\r\n    const records = localDB.getAll();\r\n    const filteredRecords = records.filter(record => record.id !== id);\r\n    \r\n    if (filteredRecords.length !== records.length) {\r\n      localStorage.setItem(DB_KEY, JSON.stringify(filteredRecords));\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  },\r\n  \r\n  // Bulk operations\r\n  bulkUpdate: (ids, updates) => {\r\n    const records = localDB.getAll();\r\n    let updatedCount = 0;\r\n    \r\n    records.forEach(record => {\r\n      if (ids.includes(record.id)) {\r\n        Object.assign(record, updates, { updatedAt: new Date().toISOString() });\r\n        updatedCount++;\r\n      }\r\n    });\r\n    \r\n    if (updatedCount > 0) {\r\n      localStorage.setItem(DB_KEY, JSON.stringify(records));\r\n    }\r\n    \r\n    return updatedCount;\r\n  },\r\n  \r\n  // Get counts for tabs\r\n  getCounts: () => {\r\n    const records = localDB.getAll();\r\n    \r\n    const toDoCounts = {\r\n      total: records.filter(r => r.status === 'Draft' || r.status === 'Pending approval').length,\r\n      toSubmit: records.filter(r => r.status === 'Draft').length,\r\n      toApprove: records.filter(r => r.status === 'Pending approval').length\r\n    };\r\n    \r\n    const allItemsCounts = {\r\n      total: records.length,\r\n      active: records.filter(r => r.status !== 'Approved' && r.status !== 'Pending Payment').length\r\n    };\r\n    \r\n    return { toDo: toDoCounts, allItems: allItemsCounts };\r\n  },\r\n  \r\n  // Reset database (for testing)\r\n  reset: () => {\r\n    localStorage.removeItem(DB_KEY);\r\n    return initializeDB();\r\n  }\r\n};\r\n\r\n// Initialize on import\r\ninitializeDB(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}