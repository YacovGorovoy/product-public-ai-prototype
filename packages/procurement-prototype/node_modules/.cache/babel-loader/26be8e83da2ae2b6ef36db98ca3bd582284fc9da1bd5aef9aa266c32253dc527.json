{"ast":null,"code":"// Local database utility for managing procurement records\nimport { ALL_SAMPLE_REQUESTS } from './mockData';\nconst DB_KEY = 'procurement_records';\n\n// Initialize database with sample requests\nconst initializeDB = () => {\n  const existingData = localStorage.getItem(DB_KEY);\n  if (!existingData) {\n    const sampleData = ALL_SAMPLE_REQUESTS;\n    localStorage.setItem(DB_KEY, JSON.stringify(sampleData));\n    return sampleData;\n  }\n  return JSON.parse(existingData);\n};\n\n// CRUD Operations\nexport const localDB = {\n  // Get all records\n  getAll: () => {\n    const data = localStorage.getItem(DB_KEY);\n    return data ? JSON.parse(data) : initializeDB();\n  },\n  // Get record by ID\n  getById: id => {\n    const records = localDB.getAll();\n    return records.find(record => record.id === id);\n  },\n  // Get counts for each tab and filter\n  getCounts: () => {\n    const records = localDB.getAll();\n\n    // Count for \"To do\" tab\n    const toDoRecords = records.filter(record => record.status === 'Draft' || record.status === 'Pending approval');\n    const toSubmitCount = records.filter(record => record.status === 'Draft').length;\n    const toApproveCount = records.filter(record => record.status === 'Pending approval').length;\n\n    // Count for \"All my items\" tab\n    const allItemsCount = records.length;\n    return {\n      toDo: {\n        total: toDoRecords.length,\n        toSubmit: toSubmitCount,\n        toApprove: toApproveCount\n      },\n      allItems: {\n        total: allItemsCount,\n        myItems: records.filter(record => record.requester === 'Luca.M').length,\n        activeOnly: records.filter(record => record.status !== 'Completed' && record.status !== 'Cancelled').length\n      }\n    };\n  },\n  // Get records with filters\n  getFiltered: ({\n    tab = 'toDo',\n    // 'toDo' or 'allMyItems'\n    filter = 'all',\n    // 'toSubmit', 'toApprove', 'myItems', 'activeOnly'\n    search = '',\n    type = 'all',\n    // 'all', 'requests', 'bills', 'expenses'\n    status = 'all',\n    page = 1,\n    limit = 20\n  } = {}) => {\n    let records = localDB.getAll();\n\n    // Tab filtering\n    if (tab === 'toDo') {\n      records = records.filter(record => record.status === 'Draft' || record.status === 'Pending approval');\n    }\n\n    // Sub-filter filtering\n    if (filter === 'toSubmit') {\n      records = records.filter(record => record.status === 'Draft');\n    } else if (filter === 'toApprove') {\n      records = records.filter(record => record.status === 'Pending approval');\n    } else if (filter === 'myItems') {\n      records = records.filter(record => record.requester === 'Luca.M');\n    } else if (filter === 'activeOnly') {\n      records = records.filter(record => record.status !== 'Completed' && record.status !== 'Cancelled');\n    }\n\n    // Search filtering\n    if (search) {\n      const searchLower = search.toLowerCase();\n      records = records.filter(record => record.title && record.title.toLowerCase().includes(searchLower) || record.vendor && record.vendor.toLowerCase().includes(searchLower) || record.requester && record.requester.toLowerCase().includes(searchLower) || record.amount && record.amount.toLowerCase().includes(searchLower));\n    }\n\n    // Type filtering (focus on requests for this prototype)\n    if (type !== 'all') {\n      const typeMap = {\n        'requests': 'request',\n        'bills': 'bill',\n        'expenses': 'expense'\n      };\n      records = records.filter(record => record.type === typeMap[type]);\n    }\n\n    // Status filtering\n    if (status !== 'all') {\n      records = records.filter(record => record.status === status);\n    }\n\n    // Sort by date (newest first)\n    records.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n\n    // Pagination\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const paginatedRecords = records.slice(startIndex, endIndex);\n    return {\n      records: paginatedRecords,\n      totalCount: records.length,\n      hasMore: endIndex < records.length,\n      page,\n      limit\n    };\n  },\n  // Search for grouped results (for search dropdown)\n  search: query => {\n    if (!query) return {\n      requests: [],\n      bills: [],\n      expenses: [],\n      vendors: [],\n      employees: []\n    };\n    const records = localDB.getAll();\n    const queryLower = query.toLowerCase();\n    const requests = records.filter(record => record.type === 'request' && (record.title && record.title.toLowerCase().includes(queryLower) || record.vendor && record.vendor.toLowerCase().includes(queryLower))).slice(0, 5);\n    const bills = records.filter(record => record.type === 'bill' && (record.title && record.title.toLowerCase().includes(queryLower) || record.vendor && record.vendor.toLowerCase().includes(queryLower))).slice(0, 5);\n    const expenses = records.filter(record => record.type === 'expense' && (record.title && record.title.toLowerCase().includes(queryLower) || record.vendor && record.vendor.toLowerCase().includes(queryLower))).slice(0, 5);\n\n    // Extract unique vendors\n    const vendors = [...new Set(records.map(r => r.vendor))].filter(vendor => vendor && vendor.toLowerCase().includes(queryLower)).slice(0, 5).map(name => ({\n      id: name,\n      name\n    }));\n\n    // Extract unique employees (from requesters)\n    const employees = [...new Set(records.map(r => r.requester))].filter(employee => employee && employee.toLowerCase().includes(queryLower)).slice(0, 5).map(name => ({\n      id: name,\n      name\n    }));\n    return {\n      requests,\n      bills,\n      expenses,\n      vendors,\n      employees\n    };\n  },\n  // Update record\n  update: (id, updates) => {\n    const records = localDB.getAll();\n    const index = records.findIndex(record => record.id === id);\n    if (index !== -1) {\n      records[index] = {\n        ...records[index],\n        ...updates,\n        updatedAt: new Date().toISOString()\n      };\n      localStorage.setItem(DB_KEY, JSON.stringify(records));\n      return records[index];\n    }\n    return null;\n  },\n  // Bulk update records\n  bulkUpdate: (ids, updates) => {\n    const records = localDB.getAll();\n    let updateCount = 0;\n    ids.forEach(id => {\n      const index = records.findIndex(record => record.id === id);\n      if (index !== -1) {\n        records[index] = {\n          ...records[index],\n          ...updates,\n          updatedAt: new Date().toISOString()\n        };\n        updateCount++;\n      }\n    });\n    if (updateCount > 0) {\n      localStorage.setItem(DB_KEY, JSON.stringify(records));\n    }\n    return updateCount;\n  },\n  // Add new record\n  add: record => {\n    const records = localDB.getAll();\n    const newRecord = {\n      ...record,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    records.unshift(newRecord);\n    localStorage.setItem(DB_KEY, JSON.stringify(records));\n    return newRecord;\n  },\n  // Delete record\n  delete: id => {\n    const records = localDB.getAll();\n    const filteredRecords = records.filter(record => record.id !== id);\n    if (filteredRecords.length !== records.length) {\n      localStorage.setItem(DB_KEY, JSON.stringify(filteredRecords));\n      return true;\n    }\n    return false;\n  },\n  // Reset database (for testing)\n  reset: () => {\n    localStorage.removeItem(DB_KEY);\n    return initializeDB();\n  }\n};","map":{"version":3,"names":["ALL_SAMPLE_REQUESTS","DB_KEY","initializeDB","existingData","localStorage","getItem","sampleData","setItem","JSON","stringify","parse","localDB","getAll","data","getById","id","records","find","record","getCounts","toDoRecords","filter","status","toSubmitCount","length","toApproveCount","allItemsCount","toDo","total","toSubmit","toApprove","allItems","myItems","requester","activeOnly","getFiltered","tab","search","type","page","limit","searchLower","toLowerCase","title","includes","vendor","amount","typeMap","sort","a","b","Date","createdAt","startIndex","endIndex","paginatedRecords","slice","totalCount","hasMore","query","requests","bills","expenses","vendors","employees","queryLower","Set","map","r","name","employee","update","updates","index","findIndex","updatedAt","toISOString","bulkUpdate","ids","updateCount","forEach","add","newRecord","now","toString","unshift","delete","filteredRecords","reset","removeItem"],"sources":["C:/Users/yacov.gorovoy/Documents/Cursor-workspace/procurement-prototype/src/utils/localDB.js"],"sourcesContent":["// Local database utility for managing procurement records\r\nimport { ALL_SAMPLE_REQUESTS } from './mockData';\r\n\r\nconst DB_KEY = 'procurement_records';\r\n\r\n// Initialize database with sample requests\r\nconst initializeDB = () => {\r\n  const existingData = localStorage.getItem(DB_KEY);\r\n  if (!existingData) {\r\n    const sampleData = ALL_SAMPLE_REQUESTS;\r\n    localStorage.setItem(DB_KEY, JSON.stringify(sampleData));\r\n    return sampleData;\r\n  }\r\n  return JSON.parse(existingData);\r\n};\r\n\r\n// CRUD Operations\r\nexport const localDB = {\r\n  // Get all records\r\n  getAll: () => {\r\n    const data = localStorage.getItem(DB_KEY);\r\n    return data ? JSON.parse(data) : initializeDB();\r\n  },\r\n  \r\n  // Get record by ID\r\n  getById: (id) => {\r\n    const records = localDB.getAll();\r\n    return records.find(record => record.id === id);\r\n  },\r\n  \r\n  // Get counts for each tab and filter\r\n  getCounts: () => {\r\n    const records = localDB.getAll();\r\n    \r\n    // Count for \"To do\" tab\r\n    const toDoRecords = records.filter(record => \r\n      record.status === 'Draft' || record.status === 'Pending approval'\r\n    );\r\n    \r\n    const toSubmitCount = records.filter(record => record.status === 'Draft').length;\r\n    const toApproveCount = records.filter(record => record.status === 'Pending approval').length;\r\n    \r\n    // Count for \"All my items\" tab\r\n    const allItemsCount = records.length;\r\n    \r\n    return {\r\n      toDo: {\r\n        total: toDoRecords.length,\r\n        toSubmit: toSubmitCount,\r\n        toApprove: toApproveCount\r\n      },\r\n      allItems: {\r\n        total: allItemsCount,\r\n        myItems: records.filter(record => record.requester === 'Luca.M').length,\r\n        activeOnly: records.filter(record => \r\n          record.status !== 'Completed' && record.status !== 'Cancelled'\r\n        ).length\r\n      }\r\n    };\r\n  },\r\n  \r\n  // Get records with filters\r\n  getFiltered: ({\r\n    tab = 'toDo', // 'toDo' or 'allMyItems'\r\n    filter = 'all', // 'toSubmit', 'toApprove', 'myItems', 'activeOnly'\r\n    search = '',\r\n    type = 'all', // 'all', 'requests', 'bills', 'expenses'\r\n    status = 'all',\r\n    page = 1,\r\n    limit = 20\r\n  } = {}) => {\r\n    let records = localDB.getAll();\r\n    \r\n    // Tab filtering\r\n    if (tab === 'toDo') {\r\n      records = records.filter(record => \r\n        record.status === 'Draft' || record.status === 'Pending approval'\r\n      );\r\n    }\r\n    \r\n    // Sub-filter filtering\r\n    if (filter === 'toSubmit') {\r\n      records = records.filter(record => record.status === 'Draft');\r\n    } else if (filter === 'toApprove') {\r\n      records = records.filter(record => record.status === 'Pending approval');\r\n    } else if (filter === 'myItems') {\r\n      records = records.filter(record => record.requester === 'Luca.M');\r\n    } else if (filter === 'activeOnly') {\r\n      records = records.filter(record => \r\n        record.status !== 'Completed' && record.status !== 'Cancelled'\r\n      );\r\n    }\r\n    \r\n    // Search filtering\r\n    if (search) {\r\n      const searchLower = search.toLowerCase();\r\n      records = records.filter(record =>\r\n        (record.title && record.title.toLowerCase().includes(searchLower)) ||\r\n        (record.vendor && record.vendor.toLowerCase().includes(searchLower)) ||\r\n        (record.requester && record.requester.toLowerCase().includes(searchLower)) ||\r\n        (record.amount && record.amount.toLowerCase().includes(searchLower))\r\n      );\r\n    }\r\n    \r\n    // Type filtering (focus on requests for this prototype)\r\n    if (type !== 'all') {\r\n      const typeMap = {\r\n        'requests': 'request',\r\n        'bills': 'bill',\r\n        'expenses': 'expense'\r\n      };\r\n      records = records.filter(record => record.type === typeMap[type]);\r\n    }\r\n    \r\n    // Status filtering\r\n    if (status !== 'all') {\r\n      records = records.filter(record => record.status === status);\r\n    }\r\n    \r\n    // Sort by date (newest first)\r\n    records.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\r\n    \r\n    // Pagination\r\n    const startIndex = (page - 1) * limit;\r\n    const endIndex = startIndex + limit;\r\n    const paginatedRecords = records.slice(startIndex, endIndex);\r\n    \r\n    return {\r\n      records: paginatedRecords,\r\n      totalCount: records.length,\r\n      hasMore: endIndex < records.length,\r\n      page,\r\n      limit\r\n    };\r\n  },\r\n  \r\n  // Search for grouped results (for search dropdown)\r\n  search: (query) => {\r\n    if (!query) return { requests: [], bills: [], expenses: [], vendors: [], employees: [] };\r\n    \r\n    const records = localDB.getAll();\r\n    const queryLower = query.toLowerCase();\r\n    \r\n    const requests = records\r\n      .filter(record => record.type === 'request' && \r\n        ((record.title && record.title.toLowerCase().includes(queryLower)) || \r\n         (record.vendor && record.vendor.toLowerCase().includes(queryLower))))\r\n      .slice(0, 5);\r\n    \r\n    const bills = records\r\n      .filter(record => record.type === 'bill' && \r\n        ((record.title && record.title.toLowerCase().includes(queryLower)) || \r\n         (record.vendor && record.vendor.toLowerCase().includes(queryLower))))\r\n      .slice(0, 5);\r\n    \r\n    const expenses = records\r\n      .filter(record => record.type === 'expense' && \r\n        ((record.title && record.title.toLowerCase().includes(queryLower)) || \r\n         (record.vendor && record.vendor.toLowerCase().includes(queryLower))))\r\n      .slice(0, 5);\r\n    \r\n    // Extract unique vendors\r\n    const vendors = [...new Set(records.map(r => r.vendor))]\r\n      .filter(vendor => vendor && vendor.toLowerCase().includes(queryLower))\r\n      .slice(0, 5)\r\n      .map(name => ({ id: name, name }));\r\n    \r\n    // Extract unique employees (from requesters)\r\n    const employees = [...new Set(records.map(r => r.requester))]\r\n      .filter(employee => employee && employee.toLowerCase().includes(queryLower))\r\n      .slice(0, 5)\r\n      .map(name => ({ id: name, name }));\r\n    \r\n    return {\r\n      requests,\r\n      bills,\r\n      expenses,\r\n      vendors,\r\n      employees\r\n    };\r\n  },\r\n  \r\n  // Update record\r\n  update: (id, updates) => {\r\n    const records = localDB.getAll();\r\n    const index = records.findIndex(record => record.id === id);\r\n    \r\n    if (index !== -1) {\r\n      records[index] = { ...records[index], ...updates, updatedAt: new Date().toISOString() };\r\n      localStorage.setItem(DB_KEY, JSON.stringify(records));\r\n      return records[index];\r\n    }\r\n    \r\n    return null;\r\n  },\r\n  \r\n  // Bulk update records\r\n  bulkUpdate: (ids, updates) => {\r\n    const records = localDB.getAll();\r\n    let updateCount = 0;\r\n    \r\n    ids.forEach(id => {\r\n      const index = records.findIndex(record => record.id === id);\r\n      if (index !== -1) {\r\n        records[index] = { ...records[index], ...updates, updatedAt: new Date().toISOString() };\r\n        updateCount++;\r\n      }\r\n    });\r\n    \r\n    if (updateCount > 0) {\r\n      localStorage.setItem(DB_KEY, JSON.stringify(records));\r\n    }\r\n    \r\n    return updateCount;\r\n  },\r\n  \r\n  // Add new record\r\n  add: (record) => {\r\n    const records = localDB.getAll();\r\n    const newRecord = {\r\n      ...record,\r\n      id: Date.now().toString(),\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    \r\n    records.unshift(newRecord);\r\n    localStorage.setItem(DB_KEY, JSON.stringify(records));\r\n    return newRecord;\r\n  },\r\n  \r\n  // Delete record\r\n  delete: (id) => {\r\n    const records = localDB.getAll();\r\n    const filteredRecords = records.filter(record => record.id !== id);\r\n    \r\n    if (filteredRecords.length !== records.length) {\r\n      localStorage.setItem(DB_KEY, JSON.stringify(filteredRecords));\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  },\r\n  \r\n  // Reset database (for testing)\r\n  reset: () => {\r\n    localStorage.removeItem(DB_KEY);\r\n    return initializeDB();\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}