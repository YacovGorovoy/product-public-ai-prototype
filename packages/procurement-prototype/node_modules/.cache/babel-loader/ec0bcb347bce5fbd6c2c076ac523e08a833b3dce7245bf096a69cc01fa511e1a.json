{"ast":null,"code":"// Badge component for status indicators\nimport React from'react';/**\r\n * Badge for status indicators\r\n * @param {string} text - Badge text (deprecated, use children)\r\n * @param {string} children - Badge content\r\n * @param {string} color - Color variant (gray, yellow, green, blue, orange) or full Tailwind classes\r\n * @param {string} className - Additional classes\r\n */import{jsx as _jsx}from\"react/jsx-runtime\";export default function Badge(_ref){let{text,children,color='gray',className=''}=_ref;const content=children||text;const getColorClasses=colorVariant=>{switch(colorVariant){case'gray':return'bg-gray-100 text-gray-800';case'yellow':return'bg-yellow-100 text-yellow-800';case'green':return'bg-green-100 text-green-800';case'blue':return'bg-blue-100 text-blue-800';case'orange':return'bg-orange-100 text-orange-800';default:// If it's not a predefined color, assume it's full Tailwind classes\nreturn colorVariant;}};return/*#__PURE__*/_jsx(\"span\",{className:\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium \".concat(getColorClasses(color),\" \").concat(className),children:content});}","map":{"version":3,"names":["React","jsx","_jsx","Badge","_ref","text","children","color","className","content","getColorClasses","colorVariant","concat"],"sources":["C:/Users/yacov.gorovoy/Documents/Cursor-workspace/procurement-prototype/src/components/Badge.js"],"sourcesContent":["// Badge component for status indicators\r\nimport React from 'react';\r\n\r\n/**\r\n * Badge for status indicators\r\n * @param {string} text - Badge text (deprecated, use children)\r\n * @param {string} children - Badge content\r\n * @param {string} color - Color variant (gray, yellow, green, blue, orange) or full Tailwind classes\r\n * @param {string} className - Additional classes\r\n */\r\nexport default function Badge({ text, children, color = 'gray', className = '' }) {\r\n  const content = children || text;\r\n  \r\n  const getColorClasses = (colorVariant) => {\r\n    switch (colorVariant) {\r\n      case 'gray':\r\n        return 'bg-gray-100 text-gray-800';\r\n      case 'yellow':\r\n        return 'bg-yellow-100 text-yellow-800';\r\n      case 'green':\r\n        return 'bg-green-100 text-green-800';\r\n      case 'blue':\r\n        return 'bg-blue-100 text-blue-800';\r\n      case 'orange':\r\n        return 'bg-orange-100 text-orange-800';\r\n      default:\r\n        // If it's not a predefined color, assume it's full Tailwind classes\r\n        return colorVariant;\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getColorClasses(color)} ${className}`}>\r\n      {content}\r\n    </span>\r\n  );\r\n} "],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB;AACA;AACA;AACA;AACA;AACA;AACA,GANA,OAAAC,GAAA,IAAAC,IAAA,yBAOA,cAAe,SAAS,CAAAC,KAAKA,CAAAC,IAAA,CAAqD,IAApD,CAAEC,IAAI,CAAEC,QAAQ,CAAEC,KAAK,CAAG,MAAM,CAAEC,SAAS,CAAG,EAAG,CAAC,CAAAJ,IAAA,CAC9E,KAAM,CAAAK,OAAO,CAAGH,QAAQ,EAAID,IAAI,CAEhC,KAAM,CAAAK,eAAe,CAAIC,YAAY,EAAK,CACxC,OAAQA,YAAY,EAClB,IAAK,MAAM,CACT,MAAO,2BAA2B,CACpC,IAAK,QAAQ,CACX,MAAO,+BAA+B,CACxC,IAAK,OAAO,CACV,MAAO,6BAA6B,CACtC,IAAK,MAAM,CACT,MAAO,2BAA2B,CACpC,IAAK,QAAQ,CACX,MAAO,+BAA+B,CACxC,QACE;AACA,MAAO,CAAAA,YAAY,CACvB,CACF,CAAC,CAED,mBACET,IAAA,SAAMM,SAAS,4EAAAI,MAAA,CAA6EF,eAAe,CAACH,KAAK,CAAC,MAAAK,MAAA,CAAIJ,SAAS,CAAG,CAAAF,QAAA,CAC/HG,OAAO,CACJ,CAAC,CAEX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}